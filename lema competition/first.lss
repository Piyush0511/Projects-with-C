
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026b  00000000  00000000  00000589  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002d8  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d3  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001de  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
 ADCSRA|=1<<ADEN;
  6c:	37 9a       	sbi	0x06, 7	; 6
 ADCSRA|=1<<ADPS2;
  6e:	32 9a       	sbi	0x06, 2	; 6
 ADMUX|=1<<REFS0;
  70:	3e 9a       	sbi	0x07, 6	; 7
 }
  72:	08 95       	ret

00000074 <read_adc>:
 
 unsigned int read_adc()
 {
  int p=0b00000001;
  ADMUX|=p;
  74:	38 9a       	sbi	0x07, 0	; 7
  ADCSRA|=1<<ADSC;
  76:	36 9a       	sbi	0x06, 6	; 6
  while((ADCSRA&(1<<ADIF))==0);
  78:	34 9b       	sbis	0x06, 4	; 6
  7a:	fe cf       	rjmp	.-4      	; 0x78 <read_adc+0x4>
  ADCSRA|=1<<ADIF;
  7c:	34 9a       	sbi	0x06, 4	; 6
  return ADC;
  7e:	24 b1       	in	r18, 0x04	; 4
  80:	35 b1       	in	r19, 0x05	; 5
 }
  82:	c9 01       	movw	r24, r18
  84:	08 95       	ret

00000086 <main>:
 
 void main()
 {
  86:	4f 92       	push	r4
  88:	5f 92       	push	r5
  8a:	6f 92       	push	r6
  8c:	7f 92       	push	r7
  8e:	8f 92       	push	r8
  90:	9f 92       	push	r9
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
 DDRB=0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
 DDRD=0b00000000;
  aa:	11 ba       	out	0x11, r1	; 17
 PORTD=0b11111111;
  ac:	82 bb       	out	0x12, r24	; 18
  
  int c;
  
  init_adc();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
  b2:	88 e8       	ldi	r24, 0x88	; 136
  b4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	29 e1       	ldi	r18, 0x19	; 25
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x34>
    
       
   }
   else//inside the cave
   {
    PORTB=0b00001010;
  c4:	3a e0       	ldi	r19, 0x0A	; 10
  c6:	73 2e       	mov	r7, r19
	 _delay_ms(Ton);
  c8:	29 e1       	ldi	r18, 0x19	; 25
  ca:	82 2e       	mov	r8, r18
  cc:	91 2c       	mov	r9, r1

  if(c==0b11111110)
   PORTB=0b00000110;
   
  if(c==0b11111111)
   PORTB=00101010;
  ce:	98 e0       	ldi	r25, 0x08	; 8
  d0:	59 2e       	mov	r5, r25
   
  if(c==0b11111101)
   PORTB=00001001;

  if(c==0b11111110)
   PORTB=0b00000110;
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	48 2e       	mov	r4, r24
     c=PIND;
  if(c==0b11111100)
   PORTB=0b00001010;
   
  if(c==0b11111101)
   PORTB=00001001;
  d6:	66 24       	eor	r6, r6
  d8:	63 94       	inc	r6
  \
  int ambient=400;//Ambient sensor value
  
  while(1)
  {
   p=read_adc();
  da:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc>
  de:	9c 01       	movw	r18, r24
   a=p/40;
  e0:	68 e2       	ldi	r22, 0x28	; 40
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__udivmodhi4>
  e8:	eb 01       	movw	r28, r22
   T=25;
   Toff=a;
   Ton=T-Toff;
   
   if(p<ambient)//out side the cave
  ea:	20 59       	subi	r18, 0x90	; 144
  ec:	31 40       	sbci	r19, 0x01	; 1
  ee:	b0 f4       	brcc	.+44     	; 0x11c <main+0x96>
   {
     c=PIND;
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	90 e0       	ldi	r25, 0x00	; 0
  if(c==0b11111100)
  f4:	8c 3f       	cpi	r24, 0xFC	; 252
  f6:	91 05       	cpc	r25, r1
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x78>
   PORTB=0b00001010;
  fa:	78 ba       	out	0x18, r7	; 24
  fc:	ee cf       	rjmp	.-36     	; 0xda <main+0x54>
   
  if(c==0b11111101)
  fe:	8d 3f       	cpi	r24, 0xFD	; 253
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x82>
   PORTB=00001001;
 104:	68 ba       	out	0x18, r6	; 24
 106:	e9 cf       	rjmp	.-46     	; 0xda <main+0x54>

  if(c==0b11111110)
 108:	8e 3f       	cpi	r24, 0xFE	; 254
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x8c>
   PORTB=0b00000110;
 10e:	48 ba       	out	0x18, r4	; 24
 110:	e4 cf       	rjmp	.-56     	; 0xda <main+0x54>
   
  if(c==0b11111111)
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	91 05       	cpc	r25, r1
 116:	09 f7       	brne	.-62     	; 0xda <main+0x54>
   PORTB=00101010;
 118:	58 ba       	out	0x18, r5	; 24
 11a:	df cf       	rjmp	.-66     	; 0xda <main+0x54>
    
       
   }
   else//inside the cave
   {
    PORTB=0b00001010;
 11c:	78 ba       	out	0x18, r7	; 24
	 _delay_ms(Ton);
 11e:	b4 01       	movw	r22, r8
 120:	6c 1b       	sub	r22, r28
 122:	7d 0b       	sbc	r23, r29
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 41 01 	call	0x282	; 0x282 <__floatunsisf>
 12c:	5b 01       	movw	r10, r22
 12e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	4a e7       	ldi	r20, 0x7A	; 122
 136:	53 e4       	ldi	r21, 0x43	; 67
 138:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 13c:	7b 01       	movw	r14, r22
 13e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	5f e3       	ldi	r21, 0x3F	; 63
 148:	0e 94 11 01 	call	0x222	; 0x222 <__cmpsf2>
 14c:	88 23       	and	r24, r24
 14e:	1c f4       	brge	.+6      	; 0x156 <main+0xd0>
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	22 c0       	rjmp	.+68     	; 0x19a <main+0x114>
		__ticks = 1;
	else if (__tmp > 65535)
 156:	c8 01       	movw	r24, r16
 158:	b7 01       	movw	r22, r14
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	3f ef       	ldi	r19, 0xFF	; 255
 15e:	4f e7       	ldi	r20, 0x7F	; 127
 160:	57 e4       	ldi	r21, 0x47	; 71
 162:	0e 94 cb 01 	call	0x396	; 0x396 <__gesf2>
 166:	18 16       	cp	r1, r24
 168:	a4 f4       	brge	.+40     	; 0x192 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16a:	c6 01       	movw	r24, r12
 16c:	b5 01       	movw	r22, r10
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e2       	ldi	r20, 0x20	; 32
 174:	51 e4       	ldi	r21, 0x41	; 65
 176:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 17a:	0e 94 15 01 	call	0x22a	; 0x22a <__fixunssfsi>
 17e:	05 c0       	rjmp	.+10     	; 0x18a <main+0x104>
 180:	c4 01       	movw	r24, r8
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xfc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	61 50       	subi	r22, 0x01	; 1
 188:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	c1 f7       	brne	.-16     	; 0x180 <main+0xfa>
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 192:	c8 01       	movw	r24, r16
 194:	b7 01       	movw	r22, r14
 196:	0e 94 15 01 	call	0x22a	; 0x22a <__fixunssfsi>
 19a:	cb 01       	movw	r24, r22
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x116>
	 PORTB=0b00000000;
 1a0:	18 ba       	out	0x18, r1	; 24
	 _delay_ms(Toff);
 1a2:	be 01       	movw	r22, r28
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 41 01 	call	0x282	; 0x282 <__floatunsisf>
 1ac:	5b 01       	movw	r10, r22
 1ae:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	4a e7       	ldi	r20, 0x7A	; 122
 1b6:	53 e4       	ldi	r21, 0x43	; 67
 1b8:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 1bc:	7b 01       	movw	r14, r22
 1be:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	0e 94 11 01 	call	0x222	; 0x222 <__cmpsf2>
 1cc:	88 23       	and	r24, r24
 1ce:	1c f4       	brge	.+6      	; 0x1d6 <main+0x150>
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	22 c0       	rjmp	.+68     	; 0x21a <main+0x194>
		__ticks = 1;
	else if (__tmp > 65535)
 1d6:	c8 01       	movw	r24, r16
 1d8:	b7 01       	movw	r22, r14
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
 1de:	4f e7       	ldi	r20, 0x7F	; 127
 1e0:	57 e4       	ldi	r21, 0x47	; 71
 1e2:	0e 94 cb 01 	call	0x396	; 0x396 <__gesf2>
 1e6:	18 16       	cp	r1, r24
 1e8:	a4 f4       	brge	.+40     	; 0x212 <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ea:	c6 01       	movw	r24, r12
 1ec:	b5 01       	movw	r22, r10
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e2       	ldi	r20, 0x20	; 32
 1f4:	51 e4       	ldi	r21, 0x41	; 65
 1f6:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 1fa:	0e 94 15 01 	call	0x22a	; 0x22a <__fixunssfsi>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <main+0x184>
 200:	c4 01       	movw	r24, r8
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x17c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	61 50       	subi	r22, 0x01	; 1
 208:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	61 15       	cp	r22, r1
 20c:	71 05       	cpc	r23, r1
 20e:	c1 f7       	brne	.-16     	; 0x200 <main+0x17a>
 210:	64 cf       	rjmp	.-312    	; 0xda <main+0x54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 212:	c8 01       	movw	r24, r16
 214:	b7 01       	movw	r22, r14
 216:	0e 94 15 01 	call	0x22a	; 0x22a <__fixunssfsi>
 21a:	cb 01       	movw	r24, r22
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x196>
 220:	5c cf       	rjmp	.-328    	; 0xda <main+0x54>

00000222 <__cmpsf2>:
 222:	6c d0       	rcall	.+216    	; 0x2fc <__fp_cmp>
 224:	08 f4       	brcc	.+2      	; 0x228 <__cmpsf2+0x6>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret

0000022a <__fixunssfsi>:
 22a:	94 d0       	rcall	.+296    	; 0x354 <__fp_splitA>
 22c:	88 f0       	brcs	.+34     	; 0x250 <__fixunssfsi+0x26>
 22e:	9f 57       	subi	r25, 0x7F	; 127
 230:	90 f0       	brcs	.+36     	; 0x256 <__fixunssfsi+0x2c>
 232:	b9 2f       	mov	r27, r25
 234:	99 27       	eor	r25, r25
 236:	b7 51       	subi	r27, 0x17	; 23
 238:	a0 f0       	brcs	.+40     	; 0x262 <__fixunssfsi+0x38>
 23a:	d1 f0       	breq	.+52     	; 0x270 <__fixunssfsi+0x46>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	88 1f       	adc	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	1a f0       	brmi	.+6      	; 0x24c <__fixunssfsi+0x22>
 246:	ba 95       	dec	r27
 248:	c9 f7       	brne	.-14     	; 0x23c <__fixunssfsi+0x12>
 24a:	12 c0       	rjmp	.+36     	; 0x270 <__fixunssfsi+0x46>
 24c:	b1 30       	cpi	r27, 0x01	; 1
 24e:	81 f0       	breq	.+32     	; 0x270 <__fixunssfsi+0x46>
 250:	9b d0       	rcall	.+310    	; 0x388 <__fp_zero>
 252:	b1 e0       	ldi	r27, 0x01	; 1
 254:	08 95       	ret
 256:	98 c0       	rjmp	.+304    	; 0x388 <__fp_zero>
 258:	67 2f       	mov	r22, r23
 25a:	78 2f       	mov	r23, r24
 25c:	88 27       	eor	r24, r24
 25e:	b8 5f       	subi	r27, 0xF8	; 248
 260:	39 f0       	breq	.+14     	; 0x270 <__fixunssfsi+0x46>
 262:	b9 3f       	cpi	r27, 0xF9	; 249
 264:	cc f3       	brlt	.-14     	; 0x258 <__fixunssfsi+0x2e>
 266:	86 95       	lsr	r24
 268:	77 95       	ror	r23
 26a:	67 95       	ror	r22
 26c:	b3 95       	inc	r27
 26e:	d9 f7       	brne	.-10     	; 0x266 <__fixunssfsi+0x3c>
 270:	3e f4       	brtc	.+14     	; 0x280 <__fixunssfsi+0x56>
 272:	90 95       	com	r25
 274:	80 95       	com	r24
 276:	70 95       	com	r23
 278:	61 95       	neg	r22
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	8f 4f       	sbci	r24, 0xFF	; 255
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__floatunsisf>:
 282:	e8 94       	clt
 284:	09 c0       	rjmp	.+18     	; 0x298 <__floatsisf+0x12>

00000286 <__floatsisf>:
 286:	97 fb       	bst	r25, 7
 288:	3e f4       	brtc	.+14     	; 0x298 <__floatsisf+0x12>
 28a:	90 95       	com	r25
 28c:	80 95       	com	r24
 28e:	70 95       	com	r23
 290:	61 95       	neg	r22
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	8f 4f       	sbci	r24, 0xFF	; 255
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	99 23       	and	r25, r25
 29a:	a9 f0       	breq	.+42     	; 0x2c6 <__floatsisf+0x40>
 29c:	f9 2f       	mov	r31, r25
 29e:	96 e9       	ldi	r25, 0x96	; 150
 2a0:	bb 27       	eor	r27, r27
 2a2:	93 95       	inc	r25
 2a4:	f6 95       	lsr	r31
 2a6:	87 95       	ror	r24
 2a8:	77 95       	ror	r23
 2aa:	67 95       	ror	r22
 2ac:	b7 95       	ror	r27
 2ae:	f1 11       	cpse	r31, r1
 2b0:	f8 cf       	rjmp	.-16     	; 0x2a2 <__floatsisf+0x1c>
 2b2:	fa f4       	brpl	.+62     	; 0x2f2 <__floatsisf+0x6c>
 2b4:	bb 0f       	add	r27, r27
 2b6:	11 f4       	brne	.+4      	; 0x2bc <__floatsisf+0x36>
 2b8:	60 ff       	sbrs	r22, 0
 2ba:	1b c0       	rjmp	.+54     	; 0x2f2 <__floatsisf+0x6c>
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	8f 4f       	sbci	r24, 0xFF	; 255
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <__floatsisf+0x6c>
 2c6:	88 23       	and	r24, r24
 2c8:	11 f0       	breq	.+4      	; 0x2ce <__floatsisf+0x48>
 2ca:	96 e9       	ldi	r25, 0x96	; 150
 2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <__floatsisf+0x6a>
 2ce:	77 23       	and	r23, r23
 2d0:	21 f0       	breq	.+8      	; 0x2da <__floatsisf+0x54>
 2d2:	9e e8       	ldi	r25, 0x8E	; 142
 2d4:	87 2f       	mov	r24, r23
 2d6:	76 2f       	mov	r23, r22
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <__floatsisf+0x5e>
 2da:	66 23       	and	r22, r22
 2dc:	71 f0       	breq	.+28     	; 0x2fa <__floatsisf+0x74>
 2de:	96 e8       	ldi	r25, 0x86	; 134
 2e0:	86 2f       	mov	r24, r22
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	2a f0       	brmi	.+10     	; 0x2f2 <__floatsisf+0x6c>
 2e8:	9a 95       	dec	r25
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	da f7       	brpl	.-10     	; 0x2e8 <__floatsisf+0x62>
 2f2:	88 0f       	add	r24, r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	97 f9       	bld	r25, 7
 2fa:	08 95       	ret

000002fc <__fp_cmp>:
 2fc:	99 0f       	add	r25, r25
 2fe:	00 08       	sbc	r0, r0
 300:	55 0f       	add	r21, r21
 302:	aa 0b       	sbc	r26, r26
 304:	e0 e8       	ldi	r30, 0x80	; 128
 306:	fe ef       	ldi	r31, 0xFE	; 254
 308:	16 16       	cp	r1, r22
 30a:	17 06       	cpc	r1, r23
 30c:	e8 07       	cpc	r30, r24
 30e:	f9 07       	cpc	r31, r25
 310:	c0 f0       	brcs	.+48     	; 0x342 <__fp_cmp+0x46>
 312:	12 16       	cp	r1, r18
 314:	13 06       	cpc	r1, r19
 316:	e4 07       	cpc	r30, r20
 318:	f5 07       	cpc	r31, r21
 31a:	98 f0       	brcs	.+38     	; 0x342 <__fp_cmp+0x46>
 31c:	62 1b       	sub	r22, r18
 31e:	73 0b       	sbc	r23, r19
 320:	84 0b       	sbc	r24, r20
 322:	95 0b       	sbc	r25, r21
 324:	39 f4       	brne	.+14     	; 0x334 <__fp_cmp+0x38>
 326:	0a 26       	eor	r0, r26
 328:	61 f0       	breq	.+24     	; 0x342 <__fp_cmp+0x46>
 32a:	23 2b       	or	r18, r19
 32c:	24 2b       	or	r18, r20
 32e:	25 2b       	or	r18, r21
 330:	21 f4       	brne	.+8      	; 0x33a <__fp_cmp+0x3e>
 332:	08 95       	ret
 334:	0a 26       	eor	r0, r26
 336:	09 f4       	brne	.+2      	; 0x33a <__fp_cmp+0x3e>
 338:	a1 40       	sbci	r26, 0x01	; 1
 33a:	a6 95       	lsr	r26
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	81 1d       	adc	r24, r1
 340:	81 1d       	adc	r24, r1
 342:	08 95       	ret

00000344 <__fp_split3>:
 344:	57 fd       	sbrc	r21, 7
 346:	90 58       	subi	r25, 0x80	; 128
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	59 f0       	breq	.+22     	; 0x364 <__fp_splitA+0x10>
 34e:	5f 3f       	cpi	r21, 0xFF	; 255
 350:	71 f0       	breq	.+28     	; 0x36e <__fp_splitA+0x1a>
 352:	47 95       	ror	r20

00000354 <__fp_splitA>:
 354:	88 0f       	add	r24, r24
 356:	97 fb       	bst	r25, 7
 358:	99 1f       	adc	r25, r25
 35a:	61 f0       	breq	.+24     	; 0x374 <__fp_splitA+0x20>
 35c:	9f 3f       	cpi	r25, 0xFF	; 255
 35e:	79 f0       	breq	.+30     	; 0x37e <__fp_splitA+0x2a>
 360:	87 95       	ror	r24
 362:	08 95       	ret
 364:	12 16       	cp	r1, r18
 366:	13 06       	cpc	r1, r19
 368:	14 06       	cpc	r1, r20
 36a:	55 1f       	adc	r21, r21
 36c:	f2 cf       	rjmp	.-28     	; 0x352 <__fp_split3+0xe>
 36e:	46 95       	lsr	r20
 370:	f1 df       	rcall	.-30     	; 0x354 <__fp_splitA>
 372:	08 c0       	rjmp	.+16     	; 0x384 <__fp_splitA+0x30>
 374:	16 16       	cp	r1, r22
 376:	17 06       	cpc	r1, r23
 378:	18 06       	cpc	r1, r24
 37a:	99 1f       	adc	r25, r25
 37c:	f1 cf       	rjmp	.-30     	; 0x360 <__fp_splitA+0xc>
 37e:	86 95       	lsr	r24
 380:	71 05       	cpc	r23, r1
 382:	61 05       	cpc	r22, r1
 384:	08 94       	sec
 386:	08 95       	ret

00000388 <__fp_zero>:
 388:	e8 94       	clt

0000038a <__fp_szero>:
 38a:	bb 27       	eor	r27, r27
 38c:	66 27       	eor	r22, r22
 38e:	77 27       	eor	r23, r23
 390:	cb 01       	movw	r24, r22
 392:	97 f9       	bld	r25, 7
 394:	08 95       	ret

00000396 <__gesf2>:
 396:	b2 df       	rcall	.-156    	; 0x2fc <__fp_cmp>
 398:	08 f4       	brcc	.+2      	; 0x39c <__gesf2+0x6>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__mulsf3>:
 39e:	0b d0       	rcall	.+22     	; 0x3b6 <__mulsf3x>
 3a0:	78 c0       	rjmp	.+240    	; 0x492 <__fp_round>
 3a2:	69 d0       	rcall	.+210    	; 0x476 <__fp_pscA>
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <__mulsf3+0x12>
 3a6:	6e d0       	rcall	.+220    	; 0x484 <__fp_pscB>
 3a8:	18 f0       	brcs	.+6      	; 0x3b0 <__mulsf3+0x12>
 3aa:	95 23       	and	r25, r21
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <__mulsf3+0x12>
 3ae:	5a c0       	rjmp	.+180    	; 0x464 <__fp_inf>
 3b0:	5f c0       	rjmp	.+190    	; 0x470 <__fp_nan>
 3b2:	11 24       	eor	r1, r1
 3b4:	ea cf       	rjmp	.-44     	; 0x38a <__fp_szero>

000003b6 <__mulsf3x>:
 3b6:	c6 df       	rcall	.-116    	; 0x344 <__fp_split3>
 3b8:	a0 f3       	brcs	.-24     	; 0x3a2 <__mulsf3+0x4>

000003ba <__mulsf3_pse>:
 3ba:	95 9f       	mul	r25, r21
 3bc:	d1 f3       	breq	.-12     	; 0x3b2 <__mulsf3+0x14>
 3be:	95 0f       	add	r25, r21
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	55 1f       	adc	r21, r21
 3c4:	62 9f       	mul	r22, r18
 3c6:	f0 01       	movw	r30, r0
 3c8:	72 9f       	mul	r23, r18
 3ca:	bb 27       	eor	r27, r27
 3cc:	f0 0d       	add	r31, r0
 3ce:	b1 1d       	adc	r27, r1
 3d0:	63 9f       	mul	r22, r19
 3d2:	aa 27       	eor	r26, r26
 3d4:	f0 0d       	add	r31, r0
 3d6:	b1 1d       	adc	r27, r1
 3d8:	aa 1f       	adc	r26, r26
 3da:	64 9f       	mul	r22, r20
 3dc:	66 27       	eor	r22, r22
 3de:	b0 0d       	add	r27, r0
 3e0:	a1 1d       	adc	r26, r1
 3e2:	66 1f       	adc	r22, r22
 3e4:	82 9f       	mul	r24, r18
 3e6:	22 27       	eor	r18, r18
 3e8:	b0 0d       	add	r27, r0
 3ea:	a1 1d       	adc	r26, r1
 3ec:	62 1f       	adc	r22, r18
 3ee:	73 9f       	mul	r23, r19
 3f0:	b0 0d       	add	r27, r0
 3f2:	a1 1d       	adc	r26, r1
 3f4:	62 1f       	adc	r22, r18
 3f6:	83 9f       	mul	r24, r19
 3f8:	a0 0d       	add	r26, r0
 3fa:	61 1d       	adc	r22, r1
 3fc:	22 1f       	adc	r18, r18
 3fe:	74 9f       	mul	r23, r20
 400:	33 27       	eor	r19, r19
 402:	a0 0d       	add	r26, r0
 404:	61 1d       	adc	r22, r1
 406:	23 1f       	adc	r18, r19
 408:	84 9f       	mul	r24, r20
 40a:	60 0d       	add	r22, r0
 40c:	21 1d       	adc	r18, r1
 40e:	82 2f       	mov	r24, r18
 410:	76 2f       	mov	r23, r22
 412:	6a 2f       	mov	r22, r26
 414:	11 24       	eor	r1, r1
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	8a f0       	brmi	.+34     	; 0x43e <__mulsf3_pse+0x84>
 41c:	e1 f0       	breq	.+56     	; 0x456 <__mulsf3_pse+0x9c>
 41e:	88 23       	and	r24, r24
 420:	4a f0       	brmi	.+18     	; 0x434 <__mulsf3_pse+0x7a>
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	bb 1f       	adc	r27, r27
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	50 40       	sbci	r21, 0x00	; 0
 432:	a9 f7       	brne	.-22     	; 0x41e <__mulsf3_pse+0x64>
 434:	9e 3f       	cpi	r25, 0xFE	; 254
 436:	51 05       	cpc	r21, r1
 438:	70 f0       	brcs	.+28     	; 0x456 <__mulsf3_pse+0x9c>
 43a:	14 c0       	rjmp	.+40     	; 0x464 <__fp_inf>
 43c:	a6 cf       	rjmp	.-180    	; 0x38a <__fp_szero>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	ec f3       	brlt	.-6      	; 0x43c <__mulsf3_pse+0x82>
 442:	98 3e       	cpi	r25, 0xE8	; 232
 444:	dc f3       	brlt	.-10     	; 0x43c <__mulsf3_pse+0x82>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	e7 95       	ror	r30
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	c1 f7       	brne	.-16     	; 0x446 <__mulsf3_pse+0x8c>
 456:	fe 2b       	or	r31, r30
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__fp_inf>:
 464:	97 f9       	bld	r25, 7
 466:	9f 67       	ori	r25, 0x7F	; 127
 468:	80 e8       	ldi	r24, 0x80	; 128
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	08 95       	ret

00000470 <__fp_nan>:
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	08 95       	ret

00000476 <__fp_pscA>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	18 06       	cpc	r1, r24
 480:	09 06       	cpc	r0, r25
 482:	08 95       	ret

00000484 <__fp_pscB>:
 484:	00 24       	eor	r0, r0
 486:	0a 94       	dec	r0
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	14 06       	cpc	r1, r20
 48e:	05 06       	cpc	r0, r21
 490:	08 95       	ret

00000492 <__fp_round>:
 492:	09 2e       	mov	r0, r25
 494:	03 94       	inc	r0
 496:	00 0c       	add	r0, r0
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0xc>
 49a:	88 23       	and	r24, r24
 49c:	52 f0       	brmi	.+20     	; 0x4b2 <__fp_round+0x20>
 49e:	bb 0f       	add	r27, r27
 4a0:	40 f4       	brcc	.+16     	; 0x4b2 <__fp_round+0x20>
 4a2:	bf 2b       	or	r27, r31
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__fp_round+0x18>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__fp_round+0x20>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <__udivmodhi4>:
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	51 e1       	ldi	r21, 0x11	; 17
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__udivmodhi4_ep>

000004bc <__udivmodhi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	a6 17       	cp	r26, r22
 4c2:	b7 07       	cpc	r27, r23
 4c4:	10 f0       	brcs	.+4      	; 0x4ca <__udivmodhi4_ep>
 4c6:	a6 1b       	sub	r26, r22
 4c8:	b7 0b       	sbc	r27, r23

000004ca <__udivmodhi4_ep>:
 4ca:	88 1f       	adc	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	5a 95       	dec	r21
 4d0:	a9 f7       	brne	.-22     	; 0x4bc <__udivmodhi4_loop>
 4d2:	80 95       	com	r24
 4d4:	90 95       	com	r25
 4d6:	bc 01       	movw	r22, r24
 4d8:	cd 01       	movw	r24, r26
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
